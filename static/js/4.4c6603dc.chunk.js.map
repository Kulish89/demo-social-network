{"version":3,"sources":["hoc/WithAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRediect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","className","classes","dialog","active","src","avatar","id","name","Message","message","maxLength","maxLengthCreator","DialogReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","Dialogs","dialogs","messages","sendNewMessage","dialogsElements","map","el","messagesElements","dialogsSection","values","dispatch","newMessageText","reset","DialogsContainer","compose","dialogsPage"],"mappings":"uOAGIA,EAA4B,SAACC,GAC/B,MAAO,CACLC,OAAQD,EAAME,KAAKD,OAEvB,EACaE,EAAmB,SAACC,GAAe,IACxCC,EAAiB,kHAMpB,OANoB,mCACrB,WACE,OAAKC,KAAKC,MAAMN,OAGT,cAACG,EAAS,eAAKE,KAAKC,QAFlB,cAAC,IAAQ,CAACC,GAAI,UAGzB,KAAC,EANoB,CAASC,IAAML,WAWtC,OAHqCM,YAAQX,EAARW,CACnCL,EAGJ,C,sBCpBAM,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,OAAS,wBAAwB,OAAS,wBAAwB,QAAU,yBAAyB,SAAW,0B,gJCWpKC,EATI,SAACN,GAClB,OACE,sBAAKO,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAAO,UACpD,qBAAKC,IAAKX,EAAMY,SAChB,cAAC,IAAO,CAACX,GAAI,YAAcD,EAAMa,GAAG,SAAEb,EAAMc,SAGlD,ECHeC,EAJC,SAAH,GAAqB,IAAfC,EAAO,EAAPA,QACjB,OAAO,qBAAKT,UAAWC,IAAQQ,QAAQ,SAAEA,GAC3C,ECKMC,EAAYC,YAAiB,KAgB7BC,EAAkBC,YAAU,CAChCC,KAAM,wBADgBD,EAfL,SAACpB,GAClB,OACE,uBAAMsB,SAAUtB,EAAMuB,aAAa,UACjC,cAACC,EAAA,EAAK,CACJC,UAAWC,IACXC,SAAU,CAACC,IAAeX,GAC1BH,KAAM,iBACNe,YAAa,wBAEf,cAACL,EAAA,EAAK,CAACC,UAAW,SAAUX,KAAM,aAAa,oBAKrD,IA+BegB,MA1Bf,SAAiB,GAAwC,IAAtCC,EAAO,EAAPA,QAASC,EAAQ,EAARA,SAAUC,EAAc,EAAdA,eAChCC,EAAkBH,EAAQI,KAAI,SAACC,GACjC,OAAO,cAAC,EAAU,CAAatB,KAAMsB,EAAGtB,KAAMF,OAAQwB,EAAGxB,QAAjCwB,EAAGvB,GAC7B,IAEIwB,EAAmBL,EAASG,KAAI,SAACC,GACnC,OAAO,cAAC,EAAO,CAAapB,QAASoB,EAAGpB,SAAnBoB,EAAGvB,GAC1B,IAMA,OACE,sBAAKN,UAAWC,IAAQ8B,eAAe,UACrC,qBAAK/B,UAAWC,IAAQuB,QAAQ,SAAEG,IAElC,sBAAK3B,UAAWC,IAAQwB,SAAS,UAC9BK,EACD,8BACE,cAAClB,EAAe,CAACG,SAXR,SAACiB,EAAQC,EAAUxC,GAClCiC,EAAeM,EAAOE,gBACtBD,EAASE,YAAM,wBACjB,WAaF,E,iBC1CMC,EAAmBC,YACvBzC,aARoB,SAACV,GACrB,MAAO,CACLsC,QAAStC,EAAMoD,YAAYd,QAC3BC,SAAUvC,EAAMoD,YAAYb,SAEhC,GAG2B,CAAEC,qBAC3BrC,IAFuBgD,CAGvBd,GACaa,W","file":"static/js/4.4c6603dc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nlet mapStateToPropsForRediect = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) {\r\n        return <Redirect to={\"/login\"} />;\r\n      }\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRediect)(\r\n    RedirectComponent\r\n  );\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsSection\":\"Dialogs_dialogsSection__319av\",\"dialog\":\"Dialogs_dialog__3sQPi\",\"active\":\"Dialogs_active__XTggp\",\"message\":\"Dialogs_message__1F9gw\",\"messages\":\"Dialogs_messages__3ZK7x\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"./../Dialogs.module.css\";\r\nconst DialogItem = (props) => {\r\n  return (\r\n    <div className={classes.dialog + \" \" + classes.active}>\r\n      <img src={props.avatar}></img>\r\n      <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\n\r\nconst Message = ({ message }) => {\r\n  return <div className={classes.message}>{message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  requiredField,\r\n} from \"../../utils/validators/validators\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nconst maxLength = maxLengthCreator(100);\r\nconst DialogForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        validate={[requiredField, maxLength]}\r\n        name={\"newMessageText\"}\r\n        placeholder={\"Write your message!\"}\r\n      ></Field>\r\n      <Field component={\"button\"} name={\"addMessage\"}>\r\n        Send\r\n      </Field>\r\n    </form>\r\n  );\r\n};\r\nconst DialogReduxForm = reduxForm({\r\n  form: \"dialogNewMessageForm\",\r\n})(DialogForm);\r\n\r\nfunction Dialogs({ dialogs, messages, sendNewMessage }) {\r\n  let dialogsElements = dialogs.map((el) => {\r\n    return <DialogItem key={el.id} name={el.name} avatar={el.avatar} />;\r\n  });\r\n\r\n  let messagesElements = messages.map((el) => {\r\n    return <Message key={el.id} message={el.message} />;\r\n  });\r\n\r\n  let addMessage = (values, dispatch, props) => {\r\n    sendNewMessage(values.newMessageText);\r\n    dispatch(reset(\"dialogNewMessageForm\"));\r\n  };\r\n  return (\r\n    <div className={classes.dialogsSection}>\r\n      <div className={classes.dialogs}>{dialogsElements}</div>\r\n\r\n      <div className={classes.messages}>\r\n        {messagesElements}\r\n        <div>\r\n          <DialogReduxForm onSubmit={addMessage} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Dialogs;\r\n","import { sendNewMessage } from \"../../Redux/dialogs-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { withAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n  };\r\n};\r\n\r\nconst DialogsContainer = compose(\r\n  connect(mapStateToProps, { sendNewMessage }),\r\n  withAuthRedirect\r\n)(Dialogs);\r\nexport default DialogsContainer;\r\n"],"sourceRoot":""}