{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","classes","dialog","active","src","avatar","to","id","name","Message","message","maxLength","maxLengthCreator","DialogReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","Dialogs","dialogs","messages","sendNewMessage","dialogsElements","map","el","messagesElements","dialogsSection","values","dispatch","newMessageText","reset","DialogsContainer","compose","connect","state","dialogsPage","withAuthRedirect"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,OAAS,wBAAwB,OAAS,wBAAwB,QAAU,yBAAyB,SAAW,4B,8ICWpKC,EATI,SAACC,GAClB,OACE,sBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,UACE,qBAAKC,IAAKL,EAAMM,SAChB,cAAC,IAAD,CAASC,GAAI,YAAcP,EAAMQ,GAAjC,SAAsCR,EAAMS,WCAnCC,EAJC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OAAO,qBAAKV,UAAWC,IAAQS,QAAxB,SAAkCA,KCMrCC,EAAYC,YAAiB,KAgB7BC,EAAkBC,YAAU,CAChCC,KAAM,wBADgBD,EAfL,SAACf,GAClB,OACE,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXC,SAAU,CAACC,IAAeX,GAC1BH,KAAM,iBACNe,YAAa,wBAEf,cAACL,EAAA,EAAD,CAAOC,UAAW,SAAUX,KAAM,aAAlC,wBAqCSgB,MA3Bf,YAAyD,IAAtCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,eAChCC,EAAkBH,EAAQI,KAAI,SAACC,GACjC,OAAO,cAAC,EAAD,CAAwBtB,KAAMsB,EAAGtB,KAAMH,OAAQyB,EAAGzB,QAAjCyB,EAAGvB,OAGzBwB,EAAmBL,EAASG,KAAI,SAACC,GACnC,OAAO,cAAC,EAAD,CAAqBpB,QAASoB,EAAGpB,SAAnBoB,EAAGvB,OAQ1B,OACE,sBAAKP,UAAWC,IAAQ+B,eAAxB,UACE,qBAAKhC,UAAWC,IAAQwB,QAAxB,SAAkCG,IAElC,sBAAK5B,UAAWC,IAAQyB,SAAxB,UACGK,EACD,8BACE,cAAClB,EAAD,CAAiBG,SAZR,SAACiB,EAAQC,EAAUnC,GAElC4B,EAAeM,EAAOE,gBACtBD,EAASE,YAAM,qC,gBC7BbC,EAAmBC,YACvBC,aARoB,SAACC,GACrB,MAAO,CACLf,QAASe,EAAMC,YAAYhB,QAC3BC,SAAUc,EAAMC,YAAYf,YAKL,CAAEC,qBAC3Be,IAFuBJ,CAGvBd,GACaa","file":"static/js/4.0d27c9eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsSection\":\"Dialogs_dialogsSection__2Rt_2\",\"dialog\":\"Dialogs_dialog__3G5Ja\",\"active\":\"Dialogs_active__T0zyh\",\"message\":\"Dialogs_message__3o92s\",\"messages\":\"Dialogs_messages__3Q1d2\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"./../Dialogs.module.css\";\r\nconst DialogItem = (props) => {\r\n  return (\r\n    <div className={classes.dialog + \" \" + classes.active}>\r\n      <img src={props.avatar}></img>\r\n      <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\n\r\nconst Message = ({ message }) => {\r\n  return <div className={classes.message}>{message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  requiredField,\r\n} from \"../../utils/validators/validators\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nconst maxLength = maxLengthCreator(100);\r\nconst DialogForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        validate={[requiredField, maxLength]}\r\n        name={\"newMessageText\"}\r\n        placeholder={\"Write your message!\"}\r\n      ></Field>\r\n      <Field component={\"button\"} name={\"addMessage\"}>\r\n        Send\r\n      </Field>\r\n    </form>\r\n  );\r\n};\r\nconst DialogReduxForm = reduxForm({\r\n  form: \"dialogNewMessageForm\",\r\n})(DialogForm);\r\n\r\nfunction Dialogs({ dialogs, messages, sendNewMessage }) {\r\n  let dialogsElements = dialogs.map((el) => {\r\n    return <DialogItem key={el.id} name={el.name} avatar={el.avatar} />;\r\n  });\r\n\r\n  let messagesElements = messages.map((el) => {\r\n    return <Message key={el.id} message={el.message} />;\r\n  });\r\n\r\n  let addMessage = (values, dispatch, props) => {\r\n    // из сабмита приходят values, в которых лежит текст формы.!!!! и дистпатч, в кторый можно передавать функцию ресет!!!\r\n    sendNewMessage(values.newMessageText);\r\n    dispatch(reset(\"dialogNewMessageForm\"));\r\n  };\r\n  return (\r\n    <div className={classes.dialogsSection}>\r\n      <div className={classes.dialogs}>{dialogsElements}</div>\r\n\r\n      <div className={classes.messages}>\r\n        {messagesElements}\r\n        <div>\r\n          <DialogReduxForm onSubmit={addMessage} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Dialogs;\r\n","import { sendNewMessage } from \"../../Redux/dialogs-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { withAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n  };\r\n};\r\n\r\nconst DialogsContainer = compose(\r\n  connect(mapStateToProps, { sendNewMessage }),\r\n  withAuthRedirect\r\n)(Dialogs);\r\nexport default DialogsContainer;\r\n"],"sourceRoot":""}