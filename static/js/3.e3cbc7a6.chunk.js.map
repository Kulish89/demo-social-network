{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","classes","post","src","message","maxLength10","maxLengthCreator","NewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","map","el","values","addNewPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","newPostActionCreat","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileInfo","profile","background","photos","large","userImg","Preloader","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","isAuth","auth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.e3cbc7a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3HniK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__2P8y2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"ProfileInfo_background__UZnQQ\",\"userImg\":\"ProfileInfo_userImg__jWT9z\"};","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\nfunction Post(props) {\r\n  return (\r\n    <div className={classes.post}>\r\n      <img src=\"https://thumbs.dreamstime.com/b/%D1%81%D0%BC%D0%B0%D0%B9%D0%BB%D0%B8%D0%BA-%D0%BD%D0%B0-light-%D0%B3%D0%BE%D0%BB%D1%83%D0%B1%D0%BE%D0%B9-%D1%86%D0%B2%D0%B5%D1%82-%D1%84%D0%BE%D0%BD%D0%B0-%D0%BF%D1%83%D0%B7%D1%8B%D1%80%D1%8C-%D1%80%D0%B5%D1%87%D0%B8-%D1%81-%D1%81%D0%BC%D0%B0%D0%B9%D0%BB%D0%B8-%D0%BB%D0%B8%D1%86%D0%BE%D0%BC-167869100.jpg\"></img>\r\n      <div>{props.message}</div>\r\n    </div>\r\n  );\r\n}\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst NewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        name={\"newPostText\"}\r\n        placeholder=\"Write your new post!\"\r\n        validate={[required, maxLength10]}\r\n      ></Field>\r\n      <Field component={\"button\"} name={\"addPost\"}>\r\n        Send\r\n      </Field>\r\n    </form>\r\n  );\r\n};\r\nconst NewPostFormRedux = reduxForm({ form: \"newPostTextForm\" })(NewPostForm);\r\n// shouldConponentUpdate - метод классовой компоненты вызывается перед рендерингом и сравнивает пропсы и стейт!!!!\r\n// shouldComponentUpdate(nextProps, nextState) {\r\n//   // если новый пропсы и стейт не равны, то возвращает тру и идет рендер!!!\r\n//   return nextProps != this.props || nextState != this.state;\r\n// }\r\n// НО можно наследоваться от PureComponent , там шулдкомпонентапдейт прописан за нас!!!\r\n\r\n// React.memo() - HOC , который проверяет стэйт и пропсы до рендеринга!!!\r\nconst MyPosts = React.memo((props) => {\r\n  let postsElements = props.posts.map((el) => {\r\n    return <Post message={el.message} />;\r\n  });\r\n\r\n  let addNewPost = (values) => {\r\n    props.addNewPost(values.newPostText);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={classes.posts}>\r\n        <h3>My posts</h3>\r\n        <div>New post</div>\r\n        <NewPostFormRedux onSubmit={addNewPost} />\r\n      </div>\r\n\r\n      <div>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\nexport default MyPosts;\r\n","import { connect } from \"react-redux\";\r\nimport { newPostActionCreat } from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addNewPost: (newPostText) => {\r\n      dispatch(newPostActionCreat(newPostText));\r\n    },\r\n  };\r\n};\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {status || \"_____________\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onChange={onStatusChange}\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n          ></input>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n  return (\r\n    <div>\r\n      <div className={classes.background}></div>\r\n      <img src={profile.photos.large} className={classes.userImg} />\r\n      <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nfunction Profile(props) {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n}\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n} from \"../../Redux/profile-reducer\";\r\nimport Profile from \"../Profile/Profile\";\r\nimport { withRouter } from \"react-router\";\r\nimport { withAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        profile={this.props.state}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    state: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.profilePage.userId,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}