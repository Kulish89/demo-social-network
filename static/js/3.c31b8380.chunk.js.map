{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","styles","post","photo","src","userPhoto","message","maxLength10","maxLengthCreator","NewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","MyPosts","React","memo","postsElements","posts","map","el","id","classes","values","dispatch","addNewPost","newPostText","reset","MyPostsContainer","connect","state","profilePage","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","isOwner","statusTextarea","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","profile","error","formError","createField","Input","type","Object","keys","contacts","key","ProfileData","goToEditMode","contactsContainerActive","setContactsContainerActive","descriptionProfile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","dropdownButton","onClick","dropdownContainer","active","contactTitle","contactValue","Contacts","ProfileInfo","savePhoto","saveProfile","Preloader","background","mainInfoAboutProfile","photos","large","userImg","labelUploadFile","target","files","length","inputUploadFile","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.c31b8380.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"ProfileInfo_background__UZnQQ\",\"mainInfoAboutProfile\":\"ProfileInfo_mainInfoAboutProfile__Iu-e_\",\"inputUploadFile\":\"ProfileInfo_inputUploadFile__3Hhsm\",\"labelUploadFile\":\"ProfileInfo_labelUploadFile__3duj3\",\"userImg\":\"ProfileInfo_userImg__jWT9z\",\"status\":\"ProfileInfo_status__17Pqc\",\"statusTextarea\":\"ProfileInfo_statusTextarea__1TinX\",\"descriptionProfile\":\"ProfileInfo_descriptionProfile__3mMcc\",\"contacts\":\"ProfileInfo_contacts__d5XAE\",\"dropdownButton\":\"ProfileInfo_dropdownButton__1N1bU\",\"dropdownContainer\":\"ProfileInfo_dropdownContainer__3hXTh\",\"active\":\"ProfileInfo_active__nRd_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3HniK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__2P8y2\",\"photo\":\"Post_photo__U3slQ\",\"message\":\"Post_message__1qcrX\"};","import React from \"react\";\r\nimport styles from \"./Post.module.css\";\r\nimport userPhoto from \"../../../../assets/images/user.png\";\r\nfunction Post(props) {\r\n  return (\r\n    <div className={styles.post}>\r\n      <div className={styles.photo}>\r\n        <img src={userPhoto}></img>\r\n      </div>\r\n\r\n      <div className={styles.message}>{props.message}</div>\r\n    </div>\r\n  );\r\n}\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  requiredField,\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nconst maxLength10 = maxLengthCreator(300);\r\nconst NewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        name={\"newPostText\"}\r\n        placeholder=\"Write your new post!\"\r\n        validate={[requiredField, maxLength10]}\r\n      ></Field>\r\n      <Field component={\"button\"} name={\"addPost\"}>\r\n        Send\r\n      </Field>\r\n    </form>\r\n  );\r\n};\r\nconst NewPostFormRedux = reduxForm({ form: \"newPostTextForm\" })(NewPostForm);\r\n// shouldConponentUpdate - метод классовой компоненты вызывается перед рендерингом и сравнивает пропсы и стейт!!!!\r\n// shouldComponentUpdate(nextProps, nextState) {\r\n//   // если новый пропсы и стейт не равны, то возвращает тру и идет рендер!!!\r\n//   return nextProps != this.props || nextState != this.state;\r\n// }\r\n// НО можно наследоваться от PureComponent , там шулдкомпонентапдейт прописан за нас!!!\r\n\r\n// React.memo() - HOC , который проверяет стэйт и пропсы до рендеринга!!!\r\nconst MyPosts = React.memo((props) => {\r\n  let postsElements = props.posts.map((el) => {\r\n    return <Post key={el.id} message={el.message} />;\r\n  });\r\n\r\n  let publicNewPost = (values, dispatch) => {\r\n    props.addNewPost(values.newPostText);\r\n    dispatch(reset(\"newPostTextForm\"));\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={classes.posts}>\r\n        <h3>My posts</h3>\r\n        <div>New post</div>\r\n        <NewPostFormRedux onSubmit={publicNewPost} />\r\n      </div>\r\n\r\n      <div>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\nexport default MyPosts;\r\n","import { connect } from \"react-redux\";\r\nimport { addNewPost } from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, { addNewPost })(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div className={styles.status}>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {`\"${status}\"` || \"_____________\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && props.isOwner && (\r\n        <div className={styles.status}>\r\n          <textarea\r\n            className={styles.statusTextarea}\r\n            autoFocus={true}\r\n            onChange={onStatusChange}\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n          ></textarea>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea,\r\n} from \"../../common/FormsControls/FormsControls\";\r\nimport classes from \"../../common/FormsControls/FormsControls.module.css\";\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <button>Save</button>\r\n      </div>\r\n      {error && <div className={classes.formError}> {error}</div>}\r\n      <div>\r\n        <b>Full name:</b> {createField(\"Full Name\", Input, [], \"fullName\")}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job:</b>{\" \"}\r\n        {createField(\"\", Input, [], \"lookingForAJob\", { type: \"checkbox\" })}\r\n      </div>\r\n\r\n      <div>\r\n        <b>My professional skills:</b>{\" \"}\r\n        {createField(\r\n          \"My professional skills\",\r\n          Textarea,\r\n          [],\r\n          \"lookingForAJobDescription\"\r\n        )}\r\n      </div>\r\n      <div>\r\n        <b>About me:</b> {createField(\"About me\", Textarea, [], \"aboutMe\")}\r\n      </div>\r\n      <div>\r\n        <b>Contacts:</b>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key}>\r\n              <b>{key}:</b>\r\n              {createField(key, Input, [], \"contacts.\" + key)}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport default reduxForm({ form: \"edit-profile\" })(ProfileDataForm);\r\n","import React from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nconst ProfileInfo = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  let [editMode, setEditMode] = React.useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={styles.background}></div>\r\n      <div className={styles.mainInfoAboutProfile}>\r\n        <div>\r\n          <div>\r\n            <img\r\n              src={profile.photos.large || userPhoto}\r\n              className={styles.userImg}\r\n            />\r\n          </div>\r\n          <div>\r\n            {isOwner && (\r\n              <label className={styles.labelUploadFile}>\r\n                <input\r\n                  type={\"file\"}\r\n                  onChange={onMainPhotoSelected}\r\n                  className={styles.inputUploadFile}\r\n                />\r\n                <span>upload file</span>\r\n              </label>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <ProfileStatusWithHooks\r\n          status={status}\r\n          updateStatus={updateStatus}\r\n          isOwner={isOwner}\r\n        />\r\n      </div>\r\n\r\n      {editMode ? (\r\n        <ProfileDataForm\r\n          initialValues={profile}\r\n          onSubmit={onSubmit}\r\n          profile={profile}\r\n        />\r\n      ) : (\r\n        <ProfileData\r\n          profile={profile}\r\n          isOwner={isOwner}\r\n          goToEditMode={() => {\r\n            setEditMode(true);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n  const [contactsContainerActive, setContactsContainerActive] =\r\n    React.useState(false);\r\n  return (\r\n    <div className={styles.descriptionProfile}>\r\n      <div>\r\n        <b>Full name:</b> {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      {profile.lookingForAJob && (\r\n        <div>\r\n          <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>About me:</b> {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b\r\n          className={styles.dropdownButton}\r\n          onClick={() => {\r\n            setContactsContainerActive(!contactsContainerActive);\r\n          }}\r\n        >\r\n          Contacts: {contactsContainerActive ? <i>&#9650;</i> : <i>&#9660;</i>}\r\n        </b>\r\n        <div\r\n          className={\r\n            contactsContainerActive\r\n              ? styles.dropdownContainer + \" \" + styles.active\r\n              : styles.dropdownContainer\r\n          }\r\n        >\r\n          {Object.keys(profile.contacts).map((key) => {\r\n            return (\r\n              <Contacts\r\n                key={key}\r\n                contactTitle={key}\r\n                contactValue={profile.contacts[key]}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      {isOwner && contactsContainerActive && (\r\n        <div>\r\n          <button onClick={goToEditMode}>Edit</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Contacts = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={styles.contacts}>\r\n      {contactTitle}: {contactValue}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nfunction Profile(props) {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        isOwner={props.isOwner}\r\n        savePhoto={props.savePhoto}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n}\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n} from \"../../Redux/profile-reducer\";\r\nimport Profile from \"../Profile/Profile\";\r\nimport { withRouter } from \"react-router\";\r\nimport { withAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  // создаем метод, в ктором происходит содержимое методов жизненого цикла\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        // это способ редиректить не через рендер\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.state}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n        saveProfile={this.props.saveProfile}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    state: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}